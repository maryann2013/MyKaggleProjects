# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEB7X4UU5ll6YFMWC-D9aXXptxHPyEhD
"""

import sys
import numpy as np
import pandas as pd
import scipy
import seaborn as sns 
import matplotlib as plt
print('Pynthon: { }', format(sys.version))

data=pd.read_csv('creditcard.csv')
print(data)

print(data.describe())

data=data.sample(frac=0.99,random_state=1)
print(data.shape)

data.hist(figsize=(20,20))
plt.show()

fraud=data[data['Class']==1]
valid=data[data['Class']==0]
outlierFraction=len(fraud)/float(len(valid))
print(fraud)
print(valid)
print(outlierFraction)

corrmat=data.corr()
#fig=plt.figure(figsize=(12,9))
#sns.heatmap(corrmat,vmax=.8,square=True)
#plt.show()
print(corrmat)

cols=data.columns.tolist()
cols=[c for c  in cols if c not in ['Class']]
target='Class'
x=data[cols]
y=data[target]
print(x)
print(y)

print(x.shape)
print(y.shape)

#Isolation forced algorithm. 
#A local out wire factor to calculate anomaly scores.


from sklearn.metrics import classification_report,accuracy_score
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor

state=1
classifiers={
    "Isolation Forest":IsolationForest(max_samples=len(x),contamination=outlierFraction, random_state=state),
    "Local Outlier Factor":LocalOutlierFactor(n_neighbors=20,contamination=outlierFraction)
 }

#fit model
nOutliers=len(fraud)
for i,(clfName,clf) in enumerate(classifiers.items()):
  if clfName=="Local Outlier Factor":
     yPred=clf.fit_predict(x)
     scorePredict=clf.negative_outlier_factor_
  else:
      clf.fit(x)
      scorePredict=clf.decision_function(x)
      yPred=clf.predict(x)



   #reshape prediction 0 for valid 1 for fraud

yPred[yPred == 1]=0
yPred[yPred ==  1]=1

   #comparison to actual Y, metrics,accuracy report
nErrors=(yPred!=y).sum()
print('errors= ',nErrors)
print('accuracy score ',accuracy_score(y,yPred))
print('clasification report ',classification_report(y,yPred))